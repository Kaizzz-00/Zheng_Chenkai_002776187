/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Profile;
import model.ProfileHistory;

/**
 *
 * @author kai
 */
public class SearchPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchPanel
     */
    ProfileHistory history;
    
    public SearchPanel(ProfileHistory history) {
        this.history=history;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchByItem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        searchBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Employee Profile");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Search By");
        jLabel2.setToolTipText("");

        searchByItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByItemActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Name", "Employee ID", "Position Title", "Gender", "Level", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        searchBtn.setText("Search Profile");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Edit Date", "Name", "ID", "Age", "Gender", "Start Date", "Level", "Team Info", "Position Title", "Phone ", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(viewTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(searchByItem, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchByItem, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchByItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchByItemActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        Integer slctMethodIndex=jList1.getSelectedIndex();
        String slctMethod;
        String sItem;
        if (slctMethodIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Edit.");
            return;
        }// if nothing was selected, then inform the user
        sItem=searchByItem.getText();
        
        
        switch(slctMethodIndex){
            case 0: 
                slctMethod="Name";
                searchByMethod(slctMethod,sItem);
                
                break;
            case 1: 
                slctMethod="ID";
                searchByMethod(slctMethod,sItem);
                break;
            case 2: 
                slctMethod="Postitle";
                searchByMethod(slctMethod,sItem);
                break;
            case 3: 
                slctMethod="Gender";
                searchByMethod(slctMethod,sItem);
                break;
            case 4: 
                slctMethod="Level";
                searchByMethod(slctMethod,sItem);
                break;
            
                
        }
    }//GEN-LAST:event_searchBtnActionPerformed
    private void searchByMethod(String sMethod,String sitem){
        boolean isSearched;
        isSearched=false;
        DefaultTableModel model= (DefaultTableModel) viewTable.getModel();
        model.setRowCount(0);
        
        for (Profile pf:history.getHistory()){
            if ("Name".equals(sMethod)){
                if(pf.getName().equals(sitem)){
                    
                    isSearched=true;
                    Object[] row = new Object[11];
                    row[0]=pf;
                    row[1]= pf.getName();
                    row[2]= pf.getID();
                    row[3]= pf.getAge();
                    row[4]= pf.getGender();
                    row[5]= pf.getStartdate();
                    row[6]= pf.getLevel();
                    row[7]= pf.getTeamInfo();
                    row[8]= pf.getPostitle();
                    row[9]= pf.getPhone();
                    row[10]= pf.getEmail();
                    // use a small array to display each attributes
                    model.addRow(row);
                }
            }
            if ("ID".equals(sMethod)){
                if(pf.getID().equals(sitem)){
                    isSearched=true;   
                    Object[] row = new Object[11];
                    row[0]=pf;
                    row[1]= pf.getName();
                    row[2]= pf.getID();
                    row[3]= pf.getAge();
                    row[4]= pf.getGender();
                    row[5]= pf.getStartdate();
                    row[6]= pf.getLevel();
                    row[7]= pf.getTeamInfo();
                    row[8]= pf.getPostitle();
                    row[9]= pf.getPhone();
                    row[10]= pf.getEmail();
                    // use a small array to display each attributes
                    model.addRow(row);
                }
            }
            if ("Postitle".equals(sMethod)){
                if(pf.getPostitle().equals(sitem)){
                    isSearched=true;
                    Object[] row = new Object[11];
                    row[0]=pf;
                    row[1]= pf.getName();
                    row[2]= pf.getID();
                    row[3]= pf.getAge();
                    row[4]= pf.getGender();
                    row[5]= pf.getStartdate();
                    row[6]= pf.getLevel();
                    row[7]= pf.getTeamInfo();
                    row[8]= pf.getPostitle();
                    row[9]= pf.getPhone();
                    row[10]= pf.getEmail();
                    // use a small array to display each attributes
                    model.addRow(row);
                }
            }
            if ("Gender".equals(sMethod)){
                if(pf.getGender().equals(sitem)){
                    isSearched=true;
                    Object[] row = new Object[11];
                    row[0]=pf;
                    row[1]= pf.getName();
                    row[2]= pf.getID();
                    row[3]= pf.getAge();
                    row[4]= pf.getGender();
                    row[5]= pf.getStartdate();
                    row[6]= pf.getLevel();
                    row[7]= pf.getTeamInfo();
                    row[8]= pf.getPostitle();
                    row[9]= pf.getPhone();
                    row[10]= pf.getEmail();
                    // use a small array to display each attributes
                    model.addRow(row);
                }
            }
            if ("Level".equals(sMethod)){
                if(pf.getLevel().equals(sitem)){
                    isSearched=true;
                    Object[] row = new Object[11];
                    row[0]=pf;
                    row[1]= pf.getName();
                    row[2]= pf.getID();
                    row[3]= pf.getAge();
                    row[4]= pf.getGender();
                    row[5]= pf.getStartdate();
                    row[6]= pf.getLevel();
                    row[7]= pf.getTeamInfo();
                    row[8]= pf.getPostitle();
                    row[9]= pf.getPhone();
                    row[10]= pf.getEmail();
                    // use a small array to display each attributes
                    model.addRow(row);
                }
            }

    }
        if (isSearched!=true){
            JOptionPane.showMessageDialog(this, "No Such Profile In History");
            return;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchByItem;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
