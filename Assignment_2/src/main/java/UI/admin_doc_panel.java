/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import BasicModel.Users;
import BasicModel.userDirectory;
import Doctor.Doctor;
import Doctor.doctorDirectory;
import Hospital.Hospital;
import Hospital.hospitalDirectory;
import Patient.Patient;
import Patient.patientDirectory;
//import Patient.Patient;
//import Patient.Patient;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kai
 */
public class admin_doc_panel extends javax.swing.JPanel {

    /**
     * Creates new form admin_doc_panel
     */
    doctorDirectory dDirectory;
    hospitalDirectory hDirectory;
    patientDirectory pDirectory;
    userDirectory uDirectory;
    public admin_doc_panel(doctorDirectory dDirectory,hospitalDirectory hDirectory,patientDirectory pDirectory,userDirectory uDirectory) {
        initComponents();
        this.dDirectory=dDirectory;
        this.hDirectory=hDirectory;
        this.pDirectory=pDirectory;
        this.uDirectory=uDirectory;
        displayTable();
        displayHos();
        displayUser();
        //listPatient();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        editBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        delBtn = new javax.swing.JButton();
        txtPhone = new javax.swing.JTextField();
        viewBtn = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDepartment = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dcEncounterBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        patList = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        userBox = new javax.swing.JComboBox<>();
        txtUsername = new javax.swing.JTextField();

        jLabel2.setText("Name");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "ID", "DOB", "Phone", "Email", "Address", "DoctorID", "Department", "Hospital", "User"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("ID");

        jLabel10.setText("Address");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Doctor Profile");
        jLabel1.setToolTipText("");

        jLabel4.setText("DOB");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        editBtn.setText("Upadate");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Phone ");

        delBtn.setText("Delete");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel7.setText("Email");

        jLabel6.setText("DoctorID");

        jLabel8.setText("Department");

        txtDID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDIDActionPerformed(evt);
            }
        });

        jLabel9.setText("Patients");

        jLabel11.setText("Encounters");

        jLabel12.setText("Hospital");

        dcEncounterBtn.setText("Assigned Encounter Details");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hospital", "Community", "City"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jScrollPane3.setViewportView(patList);

        jLabel13.setText("Assign User");

        userBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Null" }));

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDOB, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(txtAddress))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtDID)
                                            .addComponent(txtDepartment)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(56, 56, 56)
                                                .addComponent(dcEncounterBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jScrollPane3)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(userBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 12, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dcEncounterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed
    DefaultListModel vmodel=new DefaultListModel();
    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Edit.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Doctor sd=(Doctor) model.getValueAt(slctRowIndex,0);
        
        listPatient(sd);
        txtName.setText(sd.getName());
        txtID.setText(sd.getID());
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String stringofDOB = formatter.format(sd.getDOB());
        txtDOB.setText(stringofDOB);
        txtPhone.setText(sd.getPhone());
        txtEmail.setText(sd.getEmail());
        txtAddress.setText(sd.getAddress());
        txtDID.setText(sd.getDoctorID());
        txtDepartment.setText(sd.getDepartment());
        
        if(sd.getMeUser()!=null)
        {
            txtUsername.setText(sd.getMeUser().getUserName());
        }
        
        /*for(Patient pat:sd.getDctPatient()){
           JOptionPane.showMessageDialog(this, pat);
           vmodel.addElement(pat.getName());
           viewpatList.setModel(vmodel);
       }*/ 
    }//GEN-LAST:event_viewBtnActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtDIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDIDActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        
        int slctRowIndex= jTable2.getSelectedRow();
        DefaultTableModel model= (DefaultTableModel) jTable2.getModel();
        Hospital sh=new Hospital();
        if (slctRowIndex>=0)
        {
            sh=(Hospital) model.getValueAt(slctRowIndex,0);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Note! No Hospital Selected For The Doctor!");
            
        }// if nothing was selected, then inform the user
        
        
        
        
        
        
        
        
        
        boolean isTrue=false;
        
        String name= txtName.getText();
        String id=txtID.getText();
        if (id.matches("[0-9]+") && id.length() > 1) {
            isTrue=true;
        }
        if (isTrue!=true){
            JOptionPane.showMessageDialog(this, "Valid ID Required");
            txtID.setText("");
            return; //validate the input id
        }
        
         if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(id.equals(pat.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(id.equals(doc.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        
        String phone=txtPhone.getText();
        if (phone.length()!=10)
                {
                JOptionPane.showMessageDialog(this, "10 Digit Valid Number Required");
                txtPhone.setText("");
                return; //validate the input phone
                }
        String stringDOB=txtDOB.getText();
        String email=txtEmail.getText();
        Integer indexofadd=email.indexOf("@");
        if (indexofadd<0){
                JOptionPane.showMessageDialog(this, "Valid Email Address Required");
                txtEmail.setText(""); // validate the input email
                return;
        }
        
        
        //Integer age=Integer.valueOf(txtAge.getText()); // need validation
        
        
        String address=txtAddress.getText();
        String doctorID=(txtDID.getText());
        if (!(doctorID.matches("[0-9]+") && id.length() > 1)) {
            JOptionPane.showMessageDialog(this, "Valid DoctorID Required");
            txtDID.setText(""); // validate the input email
            return;
        }
        
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(doctorID.equals(doc.getDoctorID())){
            JOptionPane.showMessageDialog(this, "Unqiue doctorID Required");
            txtDID.setText("");
            return; //validate the input id
            }
        }
        }
        
        String dep=txtDepartment.getText();
        
        
        Doctor newD=dDirectory.addnewDoctor();
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newD.setDOB(sdf.parse(stringDOB));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtDOB.setText("");
            return;
        }
   
      
        Object slctUs=userBox.getSelectedItem();
        if(this.uDirectory!=null & slctUs.toString()!="Null"){
            for(Users us:uDirectory.getDirectory())
            {
                if(us.getUserName().equals(slctUs.toString()))
                {
                    newD.setMeUser(us);
                }
            }
        }
        /*Integer bloodpressure=Integer.valueOf(txtBP.getText());
        Integer pulserate=Integer.valueOf(txtPR.getText());
        Double temperature=Double.valueOf(txtTemp.getText());
        Integer respiratoryrate=Integer.valueOf(txtRR.getText());*/
       
        
        /*String stringEndate=txtEndate.getText();
        
        SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newP.setOwnEncounter(sdf.parse(stringEndate));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtEndate.setText("");
            return;
        }*/
        /*int indexList[]=patList.getSelectedIndices();
        for (int sindex:indexList){
            JOptionPane.showMessageDialog(this, sindex);
            
        }*/
        
        /*List<String> slctpList=patList.getSelectedValuesList();    
        
        ArrayList<Patient> patientofD=new ArrayList<Patient>();
        
        for(String patname:slctpList){
            
            for(Patient p:pDirectory.getHistory())
            {
                
                if(patname.equals(p.getName()));
                patientofD.add(p);
            }
        }
        
        newD.setDctPatient(patientofD);*/
        
      
        
        newD.setName(name);
        newD.setID(id);
        newD.setPhone(phone);
        newD.setDepartment(dep);
        newD.setEmail(email);
        newD.setAddress(address);
        newD.setDoctorID(doctorID);
        if (slctRowIndex>=0){newD.setHospital(sh);} // only add hos if selected when create
        
        
        JOptionPane.showMessageDialog(this, "New Doctor Added.");
        txtName.setText("");
        
        txtID.setText("");
        txtAddress.setText("");
        txtPhone.setText("");
        txtDID.setText("");
        txtDOB.setText("");
        txtEmail.setText("");
        txtDepartment.setText("");
        txtUsername.setText("");
        displayTable();
    }//GEN-LAST:event_createBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Edit.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Doctor newD=(Doctor) model.getValueAt(slctRowIndex,0);
        
        boolean ischange=false;
        int slctRowIndex2= jTable2.getSelectedRow();
        if (slctRowIndex2>=0)  {
            ischange=true;
        }// if nothing was selected, then inform the user
        Hospital sh=new Hospital();
        if(ischange)
        {
            DefaultTableModel model2= (DefaultTableModel) jTable2.getModel();
            sh=(Hospital) model2.getValueAt(slctRowIndex2,0);
        
        }
        
        
        
        
        boolean isTrue=false;
        
        String name= txtName.getText();
        String id=txtID.getText();
        if (id.matches("[0-9]+") && id.length() > 1) {
            isTrue=true;
        }
        if (isTrue!=true){
            JOptionPane.showMessageDialog(this, "Valid ID Required");
            txtID.setText("");
            return; //validate the input id
        }
        
         if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(id.equals(pat.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(id.equals(doc.getID()) & !id.equals(newD.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        
        String phone=txtPhone.getText();
        if (phone.length()!=10)
                {
                JOptionPane.showMessageDialog(this, "10 Digit Valid Number Required");
                txtPhone.setText("");
                return; //validate the input phone
                }
        String stringDOB=txtDOB.getText();
        String email=txtEmail.getText();
        Integer indexofadd=email.indexOf("@");
        if (indexofadd<0){
                JOptionPane.showMessageDialog(this, "Valid Email Address Required");
                txtEmail.setText(""); // validate the input email
                return;
        }
        
        
        //Integer age=Integer.valueOf(txtAge.getText()); // need validation
        
      
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newD.setDOB(sdf.parse(stringDOB));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtDOB.setText("");
            return;
        }
   
        String address=txtAddress.getText();
        String doctorID=(txtDID.getText());
        if (!(doctorID.matches("[0-9]+") && id.length() > 1)) {
            JOptionPane.showMessageDialog(this, "Valid DoctorID Required");
            txtDID.setText(""); // validate the input email
            return;
        }
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(doctorID.equals(doc.getDoctorID()) & !doctorID.equals(newD.getDoctorID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        String dep=txtDepartment.getText();
        
        Object slctUs=userBox.getSelectedItem();
        if(this.uDirectory!=null & slctUs.toString()!="Null"){
            for(Users us:uDirectory.getDirectory())
            {
                if(us.getUserName().equals(slctUs.toString()))
                {
                    newD.setMeUser(us);
                }
            }
        }
        /*Integer bloodpressure=Integer.valueOf(txtBP.getText());
        Integer pulserate=Integer.valueOf(txtPR.getText());
        Double temperature=Double.valueOf(txtTemp.getText());
        Integer respiratoryrate=Integer.valueOf(txtRR.getText());*/
       
        
        /*String stringEndate=txtEndate.getText();
        
        SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newP.setOwnEncounter(sdf.parse(stringEndate));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtEndate.setText("");
            return;
        }*/
     
        
        newD.setName(name);
        newD.setID(id);
        newD.setPhone(phone);
        newD.setDepartment(dep);
        newD.setEmail(email);
        newD.setAddress(address);
        newD.setDoctorID(doctorID);
        if(ischange){
            newD.setHospital(sh);
        }
        
        
        JOptionPane.showMessageDialog(this, "Doctor Profile Updated.");
        txtName.setText("");
        
        txtID.setText("");
        txtAddress.setText("");
        txtPhone.setText("");
        txtDID.setText("");
        txtDOB.setText("");
        txtEmail.setText("");
        txtDepartment.setText("");
        txtUsername.setText("");
        displayTable();
    }//GEN-LAST:event_editBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        // TODO add your handling code here:
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Delete.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Doctor selectedProfile=(Doctor) model.getValueAt(slctRowIndex,0);
        
        dDirectory.deleteDoctor(selectedProfile);// to delete the selected profile, need to create a void
        JOptionPane.showMessageDialog(this, "Selected Profile Deleted.");
        displayTable();//refresh table
    }//GEN-LAST:event_delBtnActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed
    private void displayTable() {
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        //create a model to display the profile history
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        
        for (Doctor da:dDirectory.getHistory()){
            Object[] row = new Object[11];
            row[0]=da;
            //row[1]= pa.getName();
            row[1]= da.getID();
            
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String stringofDOB = formatter.format(da.getDOB());
            row[2]= stringofDOB;
            row[3]= da.getPhone();
            
            row[4]= da.getEmail();
            row[5]= da.getAddress();
            row[6]= da.getDoctorID();
            row[7]= da.getDepartment();
            if (da.getHospital()!=null){
            row[8]=da.getHospital().getHosName();
            }
            if (da.getMeUser()!=null){
            row[9]=da.getMeUser();
            }
            
            // use a small array to display each attributes
            model.addRow(row);

            
            
            
        }
    }
    private void displayHos() {
        DefaultTableModel model= (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        //create a model to display the profile history
       
        
        for (Hospital ho:hDirectory.getDirectory()){
            Object[] row = new Object[11];
            row[0]=ho;
            //row[1]= pa.getName();
            row[1]= ho.getCommunity().getComName();
            row[2]= ho.getCommunity().getCity().getCityName();
            
            // use a small array to display each attributes
            model.addRow(row);

            
            
            
        }
    }
    
    
    private void listPatient(Doctor sd){
        DefaultListModel lmodel=new DefaultListModel();
        
        for(Patient pat:pDirectory.getHistory()){
            if (pat.getOwnDoctor()!=null)
            {
                if(pat.getOwnDoctor().getName().equals(sd.getName()))
            {
                lmodel.addElement(pat.getName()+','+pat.getAge()+','+pat.getGender());
                patList.setModel(lmodel);
            }
            }
            
           
       } 
    }
    
    private void displayUser(){
        if (this.uDirectory!=null)
        {
            for (Users us:uDirectory.getDirectory())
        {
            if(us.getUserIdentity().equals("Doctor"))
            userBox.addItem(us.getUserName());
        }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createBtn;
    private javax.swing.JButton dcEncounterBtn;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JList<String> patList;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDID;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JComboBox<String> userBox;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
