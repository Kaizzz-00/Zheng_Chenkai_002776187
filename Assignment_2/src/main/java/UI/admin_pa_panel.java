/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import BasicModel.House;
import BasicModel.Users;
import BasicModel.houseDirectory;
import BasicModel.userDirectory;
import Doctor.Doctor;
import Doctor.doctorDirectory;
import Patient.Patient;
import Patient.patientDirectory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kai
 */
public class admin_pa_panel extends javax.swing.JPanel {

    /**
     * Creates new form admin_pa_panel
     */
    patientDirectory pDirectory;
    doctorDirectory dDirectory;
    houseDirectory houseDirectory;
    userDirectory uDirectory;
    
    public admin_pa_panel(patientDirectory pHistory,doctorDirectory dDirectory,houseDirectory houseDirectory,userDirectory uDirectory) {
        initComponents();
        this.pDirectory=pHistory;
        this.dDirectory=dDirectory;
        this.houseDirectory=houseDirectory;
        this.uDirectory=uDirectory;
        displayTable();
        displayDoc();
        displayHouse();
        displayUser();
        txtCurdoc.setEditable(false);
        txtCurhouse.setEditable(false);
        txtCurcc.setEditable(false);
        txtUsername.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtGender = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        editBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        docBox = new javax.swing.JComboBox<>();
        txtCurdoc = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        houseBox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        txtCurhouse = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCurcc = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        userBox = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "ID", "DOB", "Phone", "Email", "Address", "PatientID", "Age", "Gender", "Doctor", "UserName", "House"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Patient Profile");
        jLabel1.setToolTipText("");

        jLabel4.setText("DOB");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jLabel5.setText("Phone ");

        jLabel6.setText("Age");

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel7.setText("Email");

        txtPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPIDActionPerformed(evt);
            }
        });

        jLabel9.setText("PatientID");

        jLabel11.setText("Gender");

        txtGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGenderActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("ID");

        jLabel10.setText("Address");

        editBtn.setText("Upadate");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        jLabel12.setText("Select Doctor");

        docBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Null" }));

        txtCurdoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurdocActionPerformed(evt);
            }
        });

        jLabel13.setText("Current Doctor");

        jLabel14.setText("Select House");

        houseBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Null" }));

        jLabel15.setText("Current House");

        txtCurhouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurhouseActionPerformed(evt);
            }
        });

        jLabel16.setText("Current Community, City");

        txtCurcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurccActionPerformed(evt);
            }
        });

        jLabel17.setText("Assign User");

        userBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Null" }));

        jLabel18.setText("Username");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(237, 237, 237)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(txtDOB, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtID, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtPID, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtAddress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
                                        .addContainerGap(247, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(docBox, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel14)
                                            .addGap(18, 18, 18)
                                            .addComponent(houseBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel17)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(userBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel16))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel13)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel18)
                                                .addComponent(jLabel15)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCurdoc, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCurhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(30, 30, 30))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(265, 265, 265)
                                        .addComponent(txtCurcc, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(docBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCurdoc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(houseBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCurhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCurcc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPIDActionPerformed

    private void txtGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGenderActionPerformed
        // TODO add yur handling code here:
    }//GEN-LAST:event_txtGenderActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Edit.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Patient sp=(Patient) model.getValueAt(slctRowIndex,0);
        
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String stringofDOB = formatter.format(sp.getDOB());
        
        txtName.setText(sp.getName());
        txtID.setText(sp.getID());
        txtDOB.setText(stringofDOB);
        txtPhone.setText(sp.getPhone());
        txtEmail.setText(sp.getEmail());
        txtAge.setText(String.valueOf(sp.getAge()));
        txtGender.setText(sp.getGender());
        txtPID.setText(String.valueOf(sp.getPatientID()));
        txtAddress.setText(sp.getAddress());
        if (sp.getOwnDoctor()!=null)
        {
            txtCurdoc.setText(sp.getOwnDoctor().getName());
        }
        
        
        if (sp.getOwnHouse()!=null)
        {
        txtCurhouse.setText(sp.getOwnHouse().getName());
        if (sp.getOwnHouse().getCom()!=null)
        {
            txtCurcc.setText(sp.getOwnHouse().getCom().getComName()+" , "+sp.getOwnHouse().getCom().getCity().getCityName());
        }
        
        }
        if(sp.getMeUser()!=null){
        txtUsername.setText(sp.getMeUser().getUserName());
        }
        
    }//GEN-LAST:event_viewBtnActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        
        
        
        boolean isTrue=false;
        String name= txtName.getText();
        String id=txtID.getText();
        //verify id
        if (id.matches("[0-9]+") && id.length() > 1) {
            isTrue=true;
        }
        if (isTrue!=true){
            JOptionPane.showMessageDialog(this, "Valid ID Required");
            txtID.setText("");
            return; //validate the input id
        }
        
        
        if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(id.equals(pat.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(id.equals(doc.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        
        String phone=txtPhone.getText();
        if (phone.length()!=10)
                {
                JOptionPane.showMessageDialog(this, "10 Digit Valid Number Required");
                txtPhone.setText("");
                return; //validate the input phone
                }
        String stringDOB=txtDOB.getText();
        String email=txtEmail.getText();
        Integer indexofadd=email.indexOf("@");
        if (indexofadd<0){
                JOptionPane.showMessageDialog(this, "Valid Email Address Required");
                txtEmail.setText(""); // validate the input email
                return;
        }
        
        
        //Integer age=Integer.valueOf(txtAge.getText()); // need validation
        String stringAge=txtAge.getText();
        if (stringAge.equals("") || (!(stringAge.matches("[0-9]+") && stringAge.length() > 1))){
            JOptionPane.showMessageDialog(this, "Valid Age Required");
            txtAge.setText(""); // validate the input email
            return;
        }
        Integer age=Integer.parseInt(stringAge);
        String gender=txtGender.getText();
        String address=txtAddress.getText();
        String patientID=(txtPID.getText());
        if (!(patientID.matches("[0-9]+") && patientID.length() > 1)) {
            JOptionPane.showMessageDialog(this, "Valid PatientID Required");
            txtPID.setText(""); // validate the input email
            return;
        }
        
        if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(patientID.equals(pat.getPatientID())){
            JOptionPane.showMessageDialog(this, "Unqiue patientID Required");
            txtPID.setText("");
            return; //validate the input id
            }
        }
        }
        
        Patient newP=pDirectory.addnewPatient();
        Date ddob;
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        try {
            ddob=(sdf.parse(stringDOB));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtDOB.setText("");
            return;
        }
        newP.setDOB(ddob);
        
        
        Object slctDoc=docBox.getSelectedItem();
        if(this.dDirectory!=null & slctDoc.toString()!="Null" )
        {
          for (Doctor doc:dDirectory.getHistory())
        {
            if (doc.getName().equals(slctDoc.toString())){
            newP.setOwnDoctor(doc);
            }
        }  
        }
        
        
        Object slctHou=houseBox.getSelectedItem();
        
        if (this.houseDirectory!=null& slctHou.toString()!="Null"){
            for (House hou:houseDirectory.getDirectory())
        {
            if (hou.getName().equals(slctHou.toString())){
            newP.setOwnHouse(hou);
            }
        }
        }
        
        Object slctUs=userBox.getSelectedItem();
        if(this.uDirectory!=null & slctUs.toString()!="Null"){
            for(Users us:uDirectory.getDirectory())
            {
                if(us.getUserName().equals(slctUs.toString()))
                {
                    newP.setMeUser(us);
                }
            }
        }
        /*Integer bloodpressure=Integer.valueOf(txtBP.getText());
        Integer pulserate=Integer.valueOf(txtPR.getText());
        Double temperature=Double.valueOf(txtTemp.getText());
        Integer respiratoryrate=Integer.valueOf(txtRR.getText());*/
       
        
        /*String stringEndate=txtEndate.getText();
        
        SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newP.setOwnEncounter(sdf.parse(stringEndate));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtEndate.setText("");
            return;
        }*/
        //String endoc=txtEndoc.getText();
        //String enhos=txtEnhos.getText();
        
        newP.setName(name);
        newP.setID(id);
        newP.setPhone(phone);
        newP.setEmail(email);
        newP.setAge(age);
        newP.setGender(gender);
        newP.setAddress(address);
        newP.setPatientID(patientID);
        
        JOptionPane.showMessageDialog(this, "New Patient Added.");
        txtName.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtID.setText("");
        txtAddress.setText("");
        txtPhone.setText("");
        txtPID.setText("");
        txtDOB.setText("");
        txtEmail.setText("");
        displayTable();
    }//GEN-LAST:event_createBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Edit.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Patient newP=(Patient) model.getValueAt(slctRowIndex,0);
        
        String name= txtName.getText();
        String id=txtID.getText();
        
        
        if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(id.equals(pat.getID()) & !id.equals(newP.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        if(dDirectory!=null)
        {
            for(Doctor doc:dDirectory.getHistory()){
            if(id.equals(doc.getID())){
            JOptionPane.showMessageDialog(this, "Unqiue ID Required");
            txtID.setText("");
            return; //validate the input id
            }
        }
        }
        
        
        String phone=txtPhone.getText();
        if (phone.length()!=10)
                {
                JOptionPane.showMessageDialog(this, "10 Digit Valid Number Required");
                txtPhone.setText("");
                return; //validate the input phone
                }
        String stringDOB=txtDOB.getText();
        String email=txtEmail.getText();
        Integer indexofadd=email.indexOf("@");
        if (indexofadd<0){
                JOptionPane.showMessageDialog(this, "Valid Email Address Required");
                txtEmail.setText(""); // validate the input email
                return;
        }
        Integer age=Integer.valueOf(txtAge.getText()); // need validation
        
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        try {
            newP.setDOB(sdf.parse(stringDOB));
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Valid Start Date Format Required");
            Logger.getLogger(admin_pa_panel.class.getName()).log(Level.SEVERE, null, ex);
            txtDOB.setText("");
            return;
        }
        String gender=txtGender.getText();
        String address=txtAddress.getText();
        String patientID=(txtPID.getText());
        
        if (!(patientID.matches("[0-9]+") && patientID.length() > 1)) {
            JOptionPane.showMessageDialog(this, "Valid PatientID Required");
            txtPID.setText(""); // validate the input email
            return;
        }
        
        if(pDirectory!=null)
        {
            for(Patient pat:pDirectory.getHistory()){
            if(pat.getPatientID().equals(patientID) & !patientID.equals(newP.getPatientID())){
            JOptionPane.showMessageDialog(this, "Unqiue patientID Required");
            txtPID.setText("");
            return; //validate the input id
            }
        }
        }
        
        
        Object slctDoc=docBox.getSelectedItem();
        
        
        
        Object slctUs=userBox.getSelectedItem();
        if(this.uDirectory!=null & slctUs.toString()!="Null"){
            for(Users us:uDirectory.getDirectory())
            {
                if(us.getUserName().equals(slctUs.toString()))
                {
                    newP.setMeUser(us);
                }
            }
        }
        
        Object slctHou=houseBox.getSelectedItem();
        
        if (this.houseDirectory!=null& slctHou.toString()!="Null"){
            for (House hou:houseDirectory.getDirectory())
        {
            if (hou.getName().equals(slctHou.toString())){
            newP.setOwnHouse(hou);
            }
        }
        }
        newP.setName(name);
        newP.setID(id);
        newP.setPhone(phone);
        newP.setEmail(email);
        newP.setAge(age);
        newP.setGender(gender);
        newP.setAddress(address);
        newP.setPatientID(patientID);
        
        if (slctDoc.toString()!="Null")
        {
            
            for (Doctor doc:dDirectory.getHistory())
            {
                if (doc.getName().equals(slctDoc.toString())){
                    newP.setOwnDoctor(doc);
            }
            }
            
        }
        
        JOptionPane.showMessageDialog(this, "Patient Info Updated.");
        txtName.setText("");
        txtAge.setText("");
        txtGender.setText("");
        txtID.setText("");
        txtAddress.setText("");
        txtPhone.setText("");
        txtPID.setText("");
        txtDOB.setText("");
        txtEmail.setText("");
        txtCurdoc.setText("");
        txtCurhouse.setText("");
        txtCurcc.setText("");
        txtUsername.setText("");
        displayTable();
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int slctRowIndex= jTable1.getSelectedRow();
        if (slctRowIndex<0)  {
            JOptionPane.showMessageDialog(this, "Please Select A Row To Delete.");
            return;
        }// if nothing was selected, then inform the user
        
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        Patient selectedProfile=(Patient) model.getValueAt(slctRowIndex,0);
        
        pDirectory.deletePatient(selectedProfile);// to delete the selected profile, need to create a void
        JOptionPane.showMessageDialog(this, "Selected Profile Deleted.");
        displayTable();//refresh table
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void txtCurdocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurdocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurdocActionPerformed

    private void txtCurhouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurhouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurhouseActionPerformed

    private void txtCurccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurccActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void displayTable() {
        DefaultTableModel model= (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        //create a model to display the profile history
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
        
        for (Patient pa:pDirectory.getHistory()){
            Object[] row = new Object[12];
            row[0]=pa;
            //row[1]= pa.getName();
            row[1]= pa.getID();
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            if(pa.getDOB()!=null)
            {
                String stringofDOB = formatter.format(pa.getDOB());
                row[2]= stringofDOB;
            }
            
            row[3]= pa.getPhone();
            
            row[4]= pa.getEmail();
            row[5]= pa.getAddress();
            row[6]= pa.getPatientID();
            row[7]= pa.getAge();
            row[8]= pa.getGender();
            row[9]=pa.getOwnDoctor();
            row[10]=pa.getMeUser();
            row[11]=pa.getOwnHouse();
            // use a small array to display each attributes
            model.addRow(row);

            
            
            
        }
    }
    private void displayDoc(){
    for (Doctor doc:dDirectory.getHistory())
        {
            docBox.addItem(doc.getName());
        }
    }
    
    private void displayHouse(){
        if (this.houseDirectory!=null)
        {
            for (House hou:houseDirectory.getDirectory())
        {
            houseBox.addItem(hou.getName());
        }
        }
    }
    
    private void displayUser(){
        if (this.uDirectory!=null)
        {
            for (Users us:uDirectory.getDirectory())
        {
            if(us.getUserIdentity().equals("Patient"))
            userBox.addItem(us.getUserName());
        }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JComboBox<String> docBox;
    private javax.swing.JButton editBtn;
    private javax.swing.JComboBox<String> houseBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCurcc;
    private javax.swing.JTextField txtCurdoc;
    private javax.swing.JTextField txtCurhouse;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPID;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JComboBox<String> userBox;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
